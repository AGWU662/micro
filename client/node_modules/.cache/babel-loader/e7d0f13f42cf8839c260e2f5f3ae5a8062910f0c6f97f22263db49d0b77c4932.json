{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n  }\n  connect() {\n    const socketUrl = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\n    this.socket = io(socketUrl, {\n      transports: ['websocket'],\n      timeout: 20000\n    });\n    this.socket.on('connect', () => {\n      console.log('Connected to server');\n      this.isConnected = true;\n    });\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from server');\n      this.isConnected = false;\n    });\n    this.socket.on('error', error => {\n      console.error('Socket error:', error);\n    });\n    return this.socket;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n    }\n  }\n\n  // Trading real-time events\n  onNewTrade(callback) {\n    if (this.socket) {\n      this.socket.on('newTrade', callback);\n    }\n  }\n  onPriceUpdate(callback) {\n    if (this.socket) {\n      this.socket.on('priceUpdate', callback);\n    }\n  }\n\n  // P2P real-time events\n  onNewP2PTrade(callback) {\n    if (this.socket) {\n      this.socket.on('newP2PTrade', callback);\n    }\n  }\n  onPaymentConfirmed(callback) {\n    if (this.socket) {\n      this.socket.on('paymentConfirmed', callback);\n    }\n  }\n\n  // Wallet real-time events\n  onBalanceUpdate(callback) {\n    if (this.socket) {\n      this.socket.on('balanceUpdate', callback);\n    }\n  }\n\n  // Join user-specific room for notifications\n  joinUserRoom(userId) {\n    if (this.socket && userId) {\n      this.socket.emit('join', `user_${userId}`);\n    }\n  }\n\n  // Generic event listener\n  on(event, callback) {\n    if (this.socket) {\n      this.socket.on(event, callback);\n    }\n  }\n\n  // Generic event emitter\n  emit(event, data) {\n    if (this.socket) {\n      this.socket.emit(event, data);\n    }\n  }\n\n  // Remove event listener\n  off(event, callback) {\n    if (this.socket) {\n      this.socket.off(event, callback);\n    }\n  }\n}\n\n// Create singleton instance\nconst socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SocketService","constructor","socket","isConnected","connect","socketUrl","process","env","REACT_APP_SOCKET_URL","transports","timeout","on","console","log","error","disconnect","onNewTrade","callback","onPriceUpdate","onNewP2PTrade","onPaymentConfirmed","onBalanceUpdate","joinUserRoom","userId","emit","event","data","off","socketService"],"sources":["/workspaces/micro/client/src/services/socket.js"],"sourcesContent":["import { io } from 'socket.io-client';\n\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n  }\n\n  connect() {\n    const socketUrl = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\n    \n    this.socket = io(socketUrl, {\n      transports: ['websocket'],\n      timeout: 20000,\n    });\n\n    this.socket.on('connect', () => {\n      console.log('Connected to server');\n      this.isConnected = true;\n    });\n\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from server');\n      this.isConnected = false;\n    });\n\n    this.socket.on('error', (error) => {\n      console.error('Socket error:', error);\n    });\n\n    return this.socket;\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n    }\n  }\n\n  // Trading real-time events\n  onNewTrade(callback) {\n    if (this.socket) {\n      this.socket.on('newTrade', callback);\n    }\n  }\n\n  onPriceUpdate(callback) {\n    if (this.socket) {\n      this.socket.on('priceUpdate', callback);\n    }\n  }\n\n  // P2P real-time events\n  onNewP2PTrade(callback) {\n    if (this.socket) {\n      this.socket.on('newP2PTrade', callback);\n    }\n  }\n\n  onPaymentConfirmed(callback) {\n    if (this.socket) {\n      this.socket.on('paymentConfirmed', callback);\n    }\n  }\n\n  // Wallet real-time events\n  onBalanceUpdate(callback) {\n    if (this.socket) {\n      this.socket.on('balanceUpdate', callback);\n    }\n  }\n\n  // Join user-specific room for notifications\n  joinUserRoom(userId) {\n    if (this.socket && userId) {\n      this.socket.emit('join', `user_${userId}`);\n    }\n  }\n\n  // Generic event listener\n  on(event, callback) {\n    if (this.socket) {\n      this.socket.on(event, callback);\n    }\n  }\n\n  // Generic event emitter\n  emit(event, data) {\n    if (this.socket) {\n      this.socket.emit(event, data);\n    }\n  }\n\n  // Remove event listener\n  off(event, callback) {\n    if (this.socket) {\n      this.socket.off(event, callback);\n    }\n  }\n}\n\n// Create singleton instance\nconst socketService = new SocketService();\n\nexport default socketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}