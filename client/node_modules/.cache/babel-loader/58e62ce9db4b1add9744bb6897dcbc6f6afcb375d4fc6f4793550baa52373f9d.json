{"ast":null,"code":"var _jsxFileName = \"/workspaces/micro/client/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authService } from '../services';\nimport socketService from '../services/socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOADING':\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: null\n      };\n    case 'ERROR':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          ...action.payload\n        }\n      };\n    default:\n      return state;\n  }\n};\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  token: localStorage.getItem('token'),\n  loading: true,\n  error: null\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('user');\n    if (token && user) {\n      try {\n        const parsedUser = JSON.parse(user);\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user: parsedUser,\n            token\n          }\n        });\n\n        // Connect to socket\n        socketService.connect();\n        socketService.joinUserRoom(parsedUser.id);\n      } catch (error) {\n        console.error('Error parsing stored user:', error);\n        logout();\n      }\n    } else {\n      dispatch({\n        type: 'LOGOUT'\n      });\n    }\n  }, []);\n  const login = async (email, password) => {\n    try {\n      dispatch({\n        type: 'LOADING'\n      });\n      const response = await authService.login(email, password);\n      if (response.success) {\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user: response.user,\n            token: response.token\n          }\n        });\n\n        // Connect to socket\n        socketService.connect();\n        socketService.joinUserRoom(response.user.id);\n        return {\n          success: true\n        };\n      } else {\n        dispatch({\n          type: 'ERROR',\n          payload: response.message\n        });\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed';\n      dispatch({\n        type: 'ERROR',\n        payload: message\n      });\n      return {\n        success: false,\n        message\n      };\n    }\n  };\n  const register = async userData => {\n    try {\n      dispatch({\n        type: 'LOADING'\n      });\n      const response = await authService.register(userData);\n      if (response.success) {\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user: response.user,\n            token: response.token\n          }\n        });\n\n        // Connect to socket\n        socketService.connect();\n        socketService.joinUserRoom(response.user.id);\n        return {\n          success: true\n        };\n      } else {\n        dispatch({\n          type: 'ERROR',\n          payload: response.message\n        });\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed';\n      dispatch({\n        type: 'ERROR',\n        payload: message\n      });\n      return {\n        success: false,\n        message\n      };\n    }\n  };\n  const logout = () => {\n    authService.logout();\n    socketService.disconnect();\n    dispatch({\n      type: 'LOGOUT'\n    });\n  };\n  const updateUser = userData => {\n    dispatch({\n      type: 'UPDATE_USER',\n      payload: userData\n    });\n  };\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authService","socketService","jsxDEV","_jsxDEV","AuthContext","authReducer","state","action","type","loading","error","isAuthenticated","user","payload","token","initialState","localStorage","getItem","AuthProvider","children","_s","dispatch","parsedUser","JSON","parse","connect","joinUserRoom","id","console","logout","login","email","password","response","success","message","_error$response","_error$response$data","data","register","userData","_error$response2","_error$response2$data","disconnect","updateUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/workspaces/micro/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authService } from '../services';\nimport socketService from '../services/socket';\n\nconst AuthContext = createContext();\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOADING':\n      return { ...state, loading: true, error: null };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n        loading: false,\n        error: null,\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        loading: false,\n        error: null,\n      };\n    case 'ERROR':\n      return { ...state, loading: false, error: action.payload };\n    case 'UPDATE_USER':\n      return { ...state, user: { ...state.user, ...action.payload } };\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  token: localStorage.getItem('token'),\n  loading: true,\n  error: null,\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('user');\n\n    if (token && user) {\n      try {\n        const parsedUser = JSON.parse(user);\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: { user: parsedUser, token },\n        });\n\n        // Connect to socket\n        socketService.connect();\n        socketService.joinUserRoom(parsedUser.id);\n      } catch (error) {\n        console.error('Error parsing stored user:', error);\n        logout();\n      }\n    } else {\n      dispatch({ type: 'LOGOUT' });\n    }\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      dispatch({ type: 'LOADING' });\n      const response = await authService.login(email, password);\n      \n      if (response.success) {\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: { user: response.user, token: response.token },\n        });\n\n        // Connect to socket\n        socketService.connect();\n        socketService.joinUserRoom(response.user.id);\n\n        return { success: true };\n      } else {\n        dispatch({ type: 'ERROR', payload: response.message });\n        return { success: false, message: response.message };\n      }\n    } catch (error) {\n      const message = error.response?.data?.message || 'Login failed';\n      dispatch({ type: 'ERROR', payload: message });\n      return { success: false, message };\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      dispatch({ type: 'LOADING' });\n      const response = await authService.register(userData);\n      \n      if (response.success) {\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: { user: response.user, token: response.token },\n        });\n\n        // Connect to socket\n        socketService.connect();\n        socketService.joinUserRoom(response.user.id);\n\n        return { success: true };\n      } else {\n        dispatch({ type: 'ERROR', payload: response.message });\n        return { success: false, message: response.message };\n      }\n    } catch (error) {\n      const message = error.response?.data?.message || 'Registration failed';\n      dispatch({ type: 'ERROR', payload: message });\n      return { success: false, message };\n    }\n  };\n\n  const logout = () => {\n    authService.logout();\n    socketService.disconnect();\n    dispatch({ type: 'LOGOUT' });\n  };\n\n  const updateUser = (userData) => {\n    dispatch({ type: 'UPDATE_USER', payload: userData });\n  };\n\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    updateUser,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC/E,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,aAAa,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;AAEnC,MAAMS,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,SAAS;MACZ,OAAO;QAAE,GAAGF,KAAK;QAAEG,OAAO,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC;IACjD,KAAK,eAAe;MAClB,OAAO;QACL,GAAGJ,KAAK;QACRK,eAAe,EAAE,IAAI;QACrBC,IAAI,EAAEL,MAAM,CAACM,OAAO,CAACD,IAAI;QACzBE,KAAK,EAAEP,MAAM,CAACM,OAAO,CAACC,KAAK;QAC3BL,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IACH,KAAK,QAAQ;MACX,OAAO;QACL,GAAGJ,KAAK;QACRK,eAAe,EAAE,KAAK;QACtBC,IAAI,EAAE,IAAI;QACVE,KAAK,EAAE,IAAI;QACXL,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IACH,KAAK,OAAO;MACV,OAAO;QAAE,GAAGJ,KAAK;QAAEG,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAEH,MAAM,CAACM;MAAQ,CAAC;IAC5D,KAAK,aAAa;MAChB,OAAO;QAAE,GAAGP,KAAK;QAAEM,IAAI,EAAE;UAAE,GAAGN,KAAK,CAACM,IAAI;UAAE,GAAGL,MAAM,CAACM;QAAQ;MAAE,CAAC;IACjE;MACE,OAAOP,KAAK;EAChB;AACF,CAAC;AAED,MAAMS,YAAY,GAAG;EACnBJ,eAAe,EAAE,KAAK;EACtBC,IAAI,EAAE,IAAI;EACVE,KAAK,EAAEE,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACpCR,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACd,KAAK,EAAEe,QAAQ,CAAC,GAAGvB,UAAU,CAACO,WAAW,EAAEU,YAAY,CAAC;EAE/DhB,SAAS,CAAC,MAAM;IACd,MAAMe,KAAK,GAAGE,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAML,IAAI,GAAGI,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAEzC,IAAIH,KAAK,IAAIF,IAAI,EAAE;MACjB,IAAI;QACF,MAAMU,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACZ,IAAI,CAAC;QACnCS,QAAQ,CAAC;UACPb,IAAI,EAAE,eAAe;UACrBK,OAAO,EAAE;YAAED,IAAI,EAAEU,UAAU;YAAER;UAAM;QACrC,CAAC,CAAC;;QAEF;QACAb,aAAa,CAACwB,OAAO,CAAC,CAAC;QACvBxB,aAAa,CAACyB,YAAY,CAACJ,UAAU,CAACK,EAAE,CAAC;MAC3C,CAAC,CAAC,OAAOjB,KAAK,EAAE;QACdkB,OAAO,CAAClB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDmB,MAAM,CAAC,CAAC;MACV;IACF,CAAC,MAAM;MACLR,QAAQ,CAAC;QAAEb,IAAI,EAAE;MAAS,CAAC,CAAC;IAC9B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMsB,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACFX,QAAQ,CAAC;QAAEb,IAAI,EAAE;MAAU,CAAC,CAAC;MAC7B,MAAMyB,QAAQ,GAAG,MAAMjC,WAAW,CAAC8B,KAAK,CAACC,KAAK,EAAEC,QAAQ,CAAC;MAEzD,IAAIC,QAAQ,CAACC,OAAO,EAAE;QACpBb,QAAQ,CAAC;UACPb,IAAI,EAAE,eAAe;UACrBK,OAAO,EAAE;YAAED,IAAI,EAAEqB,QAAQ,CAACrB,IAAI;YAAEE,KAAK,EAAEmB,QAAQ,CAACnB;UAAM;QACxD,CAAC,CAAC;;QAEF;QACAb,aAAa,CAACwB,OAAO,CAAC,CAAC;QACvBxB,aAAa,CAACyB,YAAY,CAACO,QAAQ,CAACrB,IAAI,CAACe,EAAE,CAAC;QAE5C,OAAO;UAAEO,OAAO,EAAE;QAAK,CAAC;MAC1B,CAAC,MAAM;QACLb,QAAQ,CAAC;UAAEb,IAAI,EAAE,OAAO;UAAEK,OAAO,EAAEoB,QAAQ,CAACE;QAAQ,CAAC,CAAC;QACtD,OAAO;UAAED,OAAO,EAAE,KAAK;UAAEC,OAAO,EAAEF,QAAQ,CAACE;QAAQ,CAAC;MACtD;IACF,CAAC,CAAC,OAAOzB,KAAK,EAAE;MAAA,IAAA0B,eAAA,EAAAC,oBAAA;MACd,MAAMF,OAAO,GAAG,EAAAC,eAAA,GAAA1B,KAAK,CAACuB,QAAQ,cAAAG,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBE,IAAI,cAAAD,oBAAA,uBAApBA,oBAAA,CAAsBF,OAAO,KAAI,cAAc;MAC/Dd,QAAQ,CAAC;QAAEb,IAAI,EAAE,OAAO;QAAEK,OAAO,EAAEsB;MAAQ,CAAC,CAAC;MAC7C,OAAO;QAAED,OAAO,EAAE,KAAK;QAAEC;MAAQ,CAAC;IACpC;EACF,CAAC;EAED,MAAMI,QAAQ,GAAG,MAAOC,QAAQ,IAAK;IACnC,IAAI;MACFnB,QAAQ,CAAC;QAAEb,IAAI,EAAE;MAAU,CAAC,CAAC;MAC7B,MAAMyB,QAAQ,GAAG,MAAMjC,WAAW,CAACuC,QAAQ,CAACC,QAAQ,CAAC;MAErD,IAAIP,QAAQ,CAACC,OAAO,EAAE;QACpBb,QAAQ,CAAC;UACPb,IAAI,EAAE,eAAe;UACrBK,OAAO,EAAE;YAAED,IAAI,EAAEqB,QAAQ,CAACrB,IAAI;YAAEE,KAAK,EAAEmB,QAAQ,CAACnB;UAAM;QACxD,CAAC,CAAC;;QAEF;QACAb,aAAa,CAACwB,OAAO,CAAC,CAAC;QACvBxB,aAAa,CAACyB,YAAY,CAACO,QAAQ,CAACrB,IAAI,CAACe,EAAE,CAAC;QAE5C,OAAO;UAAEO,OAAO,EAAE;QAAK,CAAC;MAC1B,CAAC,MAAM;QACLb,QAAQ,CAAC;UAAEb,IAAI,EAAE,OAAO;UAAEK,OAAO,EAAEoB,QAAQ,CAACE;QAAQ,CAAC,CAAC;QACtD,OAAO;UAAED,OAAO,EAAE,KAAK;UAAEC,OAAO,EAAEF,QAAQ,CAACE;QAAQ,CAAC;MACtD;IACF,CAAC,CAAC,OAAOzB,KAAK,EAAE;MAAA,IAAA+B,gBAAA,EAAAC,qBAAA;MACd,MAAMP,OAAO,GAAG,EAAAM,gBAAA,GAAA/B,KAAK,CAACuB,QAAQ,cAAAQ,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBH,IAAI,cAAAI,qBAAA,uBAApBA,qBAAA,CAAsBP,OAAO,KAAI,qBAAqB;MACtEd,QAAQ,CAAC;QAAEb,IAAI,EAAE,OAAO;QAAEK,OAAO,EAAEsB;MAAQ,CAAC,CAAC;MAC7C,OAAO;QAAED,OAAO,EAAE,KAAK;QAAEC;MAAQ,CAAC;IACpC;EACF,CAAC;EAED,MAAMN,MAAM,GAAGA,CAAA,KAAM;IACnB7B,WAAW,CAAC6B,MAAM,CAAC,CAAC;IACpB5B,aAAa,CAAC0C,UAAU,CAAC,CAAC;IAC1BtB,QAAQ,CAAC;MAAEb,IAAI,EAAE;IAAS,CAAC,CAAC;EAC9B,CAAC;EAED,MAAMoC,UAAU,GAAIJ,QAAQ,IAAK;IAC/BnB,QAAQ,CAAC;MAAEb,IAAI,EAAE,aAAa;MAAEK,OAAO,EAAE2B;IAAS,CAAC,CAAC;EACtD,CAAC;EAED,MAAMK,KAAK,GAAG;IACZ,GAAGvC,KAAK;IACRwB,KAAK;IACLS,QAAQ;IACRV,MAAM;IACNe;EACF,CAAC;EAED,oBAAOzC,OAAA,CAACC,WAAW,CAAC0C,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA1B,QAAA,EAAEA;EAAQ;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAAC9B,EAAA,CApGWF,YAAY;AAAAiC,EAAA,GAAZjC,YAAY;AAsGzB,OAAO,MAAMkC,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGzD,UAAU,CAACO,WAAW,CAAC;EACvC,IAAI,CAACkD,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}